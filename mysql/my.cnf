# 客户端设置
[client]
port = 3306
# 默认情况下,socket文件应为/usr/local/mysql/mysql.socket,所以可以ln -s xx  /tmp/mysql.sock
socket = /tmp/mysql.sock 

default-character-set=utf8

# 服务端设置
[mysqld]

##########################################################################################################
# 基础信息

#服务端口号 默认3306
port = 3306
bind-address = 0.0.0.0

# 设置socke文件地址
socket  = /tmp/mysql.sock
pid-file = /data/mysql/mysql.pid

# 启动mysql服务进程的用户
user = mysql

# *** 复制有关的设置
# Mysql服务的唯一编号,数值位于 1 到 2^32-1之间,每个mysql服务Id需唯一.
# 此值在master和slave上都需要设置.
# 如果 “master-host” 没有被设置,则默认为1, 但是如果忽略此选项,MySQL不会作为master生效.
server-id = 1

# 复制的Slave (去掉master段的注释来使其生效)
#
# 为了配置此主机作为复制的slave服务器,你可以选择两种方法:
#
# 1) 使用 CHANGE MASTER TO 命令 (在我们的手册中有完整描述) -
# 语法如下:
#
# CHANGE MASTER TO MASTER_HOST=, MASTER_PORT= ,
# MASTER_USER=, MASTER_PASSWORD= ;
#
# 你需要替换掉 , , 等被尖括号包围的字段以及使用master的端口号替换 (默认3306).
#
# 例子:
#
# CHANGE MASTER TO MASTER_HOST=’125.564.12.1′, MASTER_PORT=3306,
# MASTER_USER=’joe’, MASTER_PASSWORD=’secret’;
#
# 或者
#
# 2) 设置以下的变量. 不论如何, 在你选择这种方法的情况下, 然后第一次启动复制(甚至不成功的情况下,
# 例如如果你输入错密码在master-password字段并且slave无法连接),
# slave会创建一个 master.info 文件,并且之后任何对于包含在此文件内的参数的变化都会被忽略
# 并且由 master.info 文件内的内容覆盖, 除非你关闭slave服务, 删除 master.info 并且重启slave 服务.
# 由于这个原因,你也许不想碰一下的配置(注释掉的) 并且使用 CHANGE MASTER TO (查看上面) 来代替
#
# 所需要的唯一id号位于 2 和 2^32 – 1之间
# (并且和master不同)
# 如果master-host被设置了.则默认值是2
# 但是如果省略,则不会生效
#server-id = 2
#
# 复制结构中的master – 必须
#master-host = 
#
# 当连接到master上时slave所用来认证的用户名 – 必须
#master-user = 
#
# 当连接到master上时slave所用来认证的密码 – 必须
#master-password = #转载请注明文章来源:http://www.linuxso.com/a/linuxrumen/413.html

# master监听的端口.
# 可选 – 默认是3306
#master-port =

# 使得slave只读.只有用户拥有SUPER权限和在上面的slave线程能够修改数据.
# 你可以使用此项去保证没有应用程序会意外的修改slave而不是master上的数据
#read_only

##########################################################################################################
# 安装目录相关
# mysql安装根目录
basedir = /usr/local/mysql-5.7.21

# mysql数据文件所在位置
datadir = /usr/local/mysql-5.7.21/data

# 此目录被MySQL用来保存临时文件.例如,
# 它被用来处理基于磁盘的大型排序,和内部排序一样.
# 以及简单的临时表.
# 如果你不创建非常大的临时文件,将其放置到 swapfs/tmpfs 文件系统上也许比较好
# 另一种选择是你也可以将其放置在独立的磁盘上.
# 你可以使用”;”来放置多个路径
# 他们会按照roud-robin方法被轮询使用.
# 一般都是使用/tmp
tmpdir  = /tmp

# 不在TCP/IP端口上进行监听.
# 如果所有的进程都是在同一台服务器连接到本地的mysqld,
# 这样设置将是增强安全的方法
# 所有mysqld的连接都是通过Unix sockets 或者命名管道进行的.
# 注意在windows下如果没有打开命名管道选项而只是用此项
# (通过 “enable-named-pipe” 选项) 将会导致mysql服务没有任何作用!

# 禁止MySQL对外部连接进行DNS解析,使用这一选项可以消除MySQL进行DNS解析的时间.但需要注意,如果开启该选项,
# 则所有远程主机连接授权都要使用IP地址方式,否则MySQL将无法正常处理连接请求
#skip-networking


##########################################################################################################
# 事务隔离级别,默认为可重复读（REPEATABLE-READ）
# 可重复读此级别下可能参数很多间隙锁,影响性能,但是修改又影响主从复制及灾难恢复,建议还是修改代码逻辑吧
# 隔离级别可选项目：READ-UNCOMMITTED  READ-COMMITTED  REPEATABLE-READ  SERIALIZABLE
transaction_isolation = REPEATABLE-READ

##########################################################################################################
# 数据库引擎与字符集相关设置

# mysql 5.1 之后,默认引擎就是InnoDB了
default_storage_engine = InnoDB
# 内存临时表默认引擎,默认InnoDB
default_tmp_storage_engine = InnoDB
# mysql 5.7新增特性,磁盘临时表默认引擎,默认InnoDB
internal_tmp_disk_storage_engine = InnoDB

#数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）
character-set-server = utf8

#数据库字符集对应一些排序等规则,注意要和character-set-server对应
collation-server = utf8_general_ci

# 设置client连接mysql时的字符集,防止乱码
# init_connect='SET NAMES utf8'

# 是否对sql语句大小写敏感,默认值为0,1表示不敏感
lower_case_table_names = 1

# 被全文检索分词词汇索引的最小的字长.
# 你也许希望减少它,如果你需要搜索更短字的时候.
# 注意在你修改此值之后,
# 你需要重建你的 FULLTEXT 索引
# 默认4
ft_min_word_len = 4


##########################################################################################################
# 数据库连接相关设置

# MySQL 服务所允许的同时会话数最大连接数,最大值16384
# 其中一个连接将被SUPER权限保留作为管理员登录,即便已经达到了连接数的上限.
# 一般考虑根据同时在线人数设置一个比较综合的数字,鉴于该数值增大并不太消耗系统资源,建议直接设10000
# 如果在访问时经常出现Too Many Connections的错误提示,则需要调高此值,以增加并行连接数量,当然这建立在机器能支撑的情况下
# 因为如果连接数越多,介于MySQL会为每个连接提供连接缓冲区,就会开销越多的内存,所以要适当调整该值,不能盲目提高设值.
# 可以过'conn%'通配符查看当前状态的连接数量,以定夺该值的大小.
max_connections = 10000

max_user_connections = 6000

# 每个客户端连接最大的错误允许数,如果达到了此限制.
# 这个客户端将会被MySQL服务阻止连接直到执行了 ”FLUSH HOSTS” 对该主机进行解禁或者服务重启
# 非法的密码以及其他在链接时的错误会增加此值.
# 查看 “Aborted_connects” 状态来获取全局计数器.
# 默认值100,考虑高并发场景下的容错,建议加大.
max_connect_errors = 10000

# MySQL打开的文件描述符限制,默认最小1024;
# 当open_files_limit没有被配置的时候,比较max_connections*5和ulimit -n的值,哪个大用哪个,
# 当open_file_limit被配置的时候,比较open_files_limit和max_connections*5的值,哪个大用哪个.
open_files_limit = 65535

# 服务器关闭交互式连接前等待活动的秒数
# 交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端
# MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效
# MySQL连接闲置超过一定时间后(单位：秒,此处为1800秒)将会被强行关闭
# 注意：仍然可能出现报错信息Can't create a new thread；此时观察系统cat /proc/mysql进程号/limits,观察进程ulimit限制情况
# 过小的话,考虑修改系统配置表,/etc/security/limits.conf和/etc/security/limits.d/90-nproc.conf
interactive_timeout = 1800 

# 服务器关闭非交互连接之前等待活动的秒数.在线程启动时,根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值,
# 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义).参数默认值：28800秒（8小时）
# MySQL服务器所支持的最大连接数是有上限的,因为每个连接的建立都会消耗内存,因此我们希望客户端在连接到MySQL Server处理完相应的操作后,
# 应该断开连接并释放占用的内存.如果你的MySQL Server有大量的闲置连接,他们不仅会白白消耗内存,而且如果连接一直在累加而不断开,
# 最终肯定会达到MySQL Server的连接上限数,这会报'too many connections'的错误.对于wait_timeout的值设定,应该根据系统的运行情况来判断.
# 在系统运行一段时间后,可以通过show processlist命令查看当前系统的连接状态,如果发现有大量的sleep状态的连接进程,则说明该参数设置的过大,
# 可以进行适当的调整小些.要同时设置interactive_timeout和wait_timeout才会生效.
wait_timeout = 1800 

# back_log 是操作系统在监听队列中所能保持的连接数,
# MySQL能有的连接数量.当主要MySQL线程在一个很短时间内得到非常多的连接请求,这就起作用,
# 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程.back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中.
# 如果期望在一个短时间内有非常高的连接率并且出现”connection refused” 报错,你需要增加它.
# 也就是说,如果MySQL的连接数据达到max_connections时,新来的请求将会被存在堆栈中,
# 以等待某一连接释放资源,该堆栈的数量即back_log,如果等待连接的数量超过back_log,将不被授予连接资源.
# 另外,这值（back_log）限于您的操作系统对到来的TCP/IP连接的侦听队列的大小.
# 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值）,试图设定back_log高于你的操作系统的限制将是无效的.
# 官方建议back_log = 50 + (max_connections / 5),封顶数为900
back_log = 900

# 所有线程所打开表的数量.
# 增加此值就增加了mysqld所需要的文件描述符的数量
# 这样你需要确认在[mysqld_safe]中 “open-files-limit” 变量设置打开文件数量允许至少4096
table_cache = 2048

##########################################################################################################
# 数据库数据交换设置

# 该参数限制服务器端,服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小
# 如果有大的BLOB字段,建议增大此值,避免写入或者更新出错.有BLOB字段,建议改为1024M
max_allowed_packet = 128M

##########################################################################################################
# 内存,cache与buffer设置

# MySQL的heap（堆积）表缓冲大小.所有联合在一个DML指令内完成,并且大多数联合甚至可以不用临时表即可以完成.
# 大多数临时表是基于内存的(HEAP)表.具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上.
# 如果某个内部heap（堆积）表大小超过tmp_table_size,MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表.
# 可以通过设置tmp_table_size选项来增加临时表的大小.也就是说,如果调高该值,MySQL同时将增加heap表的大小,可达到提高联接查询速度的效果
# 内存单个heap临时表的最大值
# 默认16M,此处设置成128M
tmp_table_size = 128M

# 定义了用户可以创建的独立内存表(memory table)所允许的最大容量.这个值用来计算内存表的最大行数值.这个变量支持动态改变
# 此选项为了防止意外创建一个超大的内存表导致用尽所有的内存资源.
# 默认16M,往往和tmp_table_size一起设置,限制用户heap临时表大小.
# 超限的话,MySQL就会自动地把它转化为基于磁盘的MyISAM表,存储在指定的tmpdir目录下,增大IO压力,建议内存大,增大该数值.
max_heap_table_size = 64M

# 表示这个mysql版本是否支持查询缓存.
# 通过SHOW STATUS LIKE 'qcache%';查看缓存相关的状态变量.
# have_query_cache

# 这个系统变量控制着查询缓存工能的开启的关闭,0时表示关闭,1时表示打开,2表示只要select 中明确指定SQL_CACHE才缓存.
# 看业务场景决定是否使用缓存,不使用,下面就不用配置了.
query_cache_type = 0 

# MySQL的查询缓冲大小（从4.0.1开始,MySQL提供了查询缓冲机制）使用查询缓冲,MySQL将 SELECT 语句和查询结果存放在缓冲区中,
# 在下一次对于同样的 SELECT 语句（区分大小写）,将直接从缓冲区中读取结果,不再执行直接返回结果.
# 根据MySQL用户手册,使用查询缓冲最多可以达到238%的效率,可以极大的提高服务器速度.如果有大量的相同的查询并且很少修改表.
# 通过检查状态值'Qcache_%',可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大,则表明经常出现缓冲不够的情况,
# 如果Qcache_hits的值也非常大,则表明查询缓冲使用非常频繁,此时需要增加缓冲大小；如果Qcache_hits的值不大,则表明你的查询重复率很低,
# 这种情况下使用查询缓冲反而会影响效率,那么可以考虑不用查询缓冲.此外,在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲
# 默认值1M
query_cache_size = 64M 

# 指定单个查询能够使用的缓冲区大小,默认1M
# 只有小于此设定值的结果才会被缓冲,保护查询缓冲,防止一个极大的结果集将其他所有的查询结果都覆盖.
query_cache_limit = 2M

# 每个被缓存的结果集要占用的最小内存,默认值4kb,一般不怎么调整.
# 如果Qcache_free_blocks值过大,可能是query_cache_min_res_unit值过大,应该调小些
# query_cache_min_res_unit的估计值：(query_cache_size - Qcache_free_memory) / Qcache_queries_in_cache
query_cache_min_res_unit = 4kb

# 在一个事务中binlog为了记录SQL状态所持有的cache大小
# 如果经常使用大、多声明的事务,你可以增加此值来获取更大的性能.
# 所有从事务来的状态都将被缓冲在binlog缓冲中然后在提交后一次性写入到binlog中
# 即一个事务在没有提交的时候,产生的日志,记录到Cache中.等到事务提交需要提交的时候,则把日志持久化到磁盘.
# 如果事务比此值大, 会使用磁盘上的临时文件来替代.
# 此缓冲在每个连接的事务第一次更新状态时被创建
# 默认binlog_cache_size大小32K
binlog_cache_size = 1M


##########################################################################
#*** MyISAM 相关选项

# 当创建新表时作为默认使用的表类型,
# 如果在创建表示没有特别执行表类型,将会使用此值
default_table_type = MYISAM

# 指定索引缓冲区的大小, 为MYISAM数据表开启供线程共享的索引缓存(缓冲MyISAM表的索引块),对INNODB引擎无效.
# 相当影响MyISAM的性能,增加它可得到更好处理的索引(对所有读和多重写).
# 通过SHOW STATUS LIKE 'key_read%'检查状态值Key_read_requests和Key_reads可以知道key_buffer_size设置是否合理.
# 比例key_reads/key_read_requests应该尽可能的低,至少是1:100,1:1000更好.
# 不要将其设置大于可用内存的30%,因为一部分内存同样被OS用来缓冲行数据
# 甚至在并不使用MyISAM 表的情况下,也需要仍旧设置起 8-64M 内存由于它同样会被内部临时磁盘表使用.
# 默认值 8M,建议值：对于内存在4GB左右的服务器该参数可设置为256M或384M.
# 注意：该参数值设置的过大反而会是服务器整体效率降低
key_buffer_size = 64M

# 针对 MyISAM 存储引擎使用特殊的类似树的cache来使得突发插入(批量插入)
# (这些插入是,INSERT … SELECT, INSERT … VALUES (…), (…), …, 以及 LOAD DATA INFILE) 更快. 此变量限制每个进程中缓冲树的字节数.
# 设置为 0 会关闭此优化.
# 为了最优化不要将此值设置大于 “key_buffer_size”.
# 当突发插入被检测到时此缓冲将被分配.
# 适用于在一次性插入100-1000+条记录时, 提高效率.
# 默认值是8M.可以针对数据量的大小,翻倍增加.
bulk_insert_buffer_size = 8M

# MySQL读入缓冲区大小.对MyISAM表全表进行顺序扫描的请求将分配一个读入缓冲区,MySQL会为它分配一段内存缓冲区.read_buffer_size变量控制这一缓冲区的大小.
# 如果对表的顺序扫描请求非常频繁,并且认为频繁扫描进行得太慢,可以通过增加该变量值以及内存缓冲区大小提高其性能
# 默认值128kb,建议值：16G内存建议1M,4G：128kb或者256kb吧
# 注意,该缓冲区是每个连接独占的,所以总缓冲区大小为 128kb*连接数 极端情况128kb*maxconnectiosns,会超级大,所以要考虑日常平均连接数.
# 一般不需要太关心该数值,稍微增大就可以了,
read_buffer_size = 262144 

# MySQL的随机读缓冲区大小.当按任意顺序读取行时(例如排序之后按照排序顺序读取),将分配一个随机读缓存区,行数据将从这个缓冲中读取来防止磁盘寻道.
# 进行排序查询时,MySQL会首先扫描一遍该缓冲,以避免磁盘搜索,提高查询速度,如果需要ORDER BY排序大量数据,可适当调高该值.
# 支持任何存储引擎
# 默认值256kb；建议值：得参考连接数,16G内存,有人推荐8M
# 注意,该缓冲区是每个连接独占的MySQL会为每个客户连接分配该缓冲空间,所以总缓冲区大小为 128kb*连接数 
# 极端情况128kb*maxconnectiosns,会超级大,所以要考虑日常平均连接数应尽量适当设置该值,提高性能时也要避免内存开销过大
read_rnd_buffer_size = 1M

# MySQL执行排序使用的缓冲大小.如果想要增加ORDER BY的速度,首先看是否可以让MySQL使用索引而不是额外的排序阶段.
# 如果不能,可以尝试增加sort_buffer_size变量的大小
# MyISAM设置恢复表之时使用的缓冲区的尺寸,当MySQL需要在 REPAIR TABLE 或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区
# 此缓冲当MySQL需要在 REPAIR, OPTIMIZE, ALTER 以及 LOAD DATA INFILE 到一个空表中引起重建索引时被分配.
# 这在每个线程中被分配.所以在设置大值时需要小心.
myisam_sort_buffer_size = 8M

# MySQL重建索引时所允许的最大临时文件的大小 (当 REPAIR, ALTER TABLE 或者 LOAD DATA INFILE).
# 如果文件大小比此值更大,索引会通过键值缓冲创建(更慢)
myisam_max_sort_file_size = 10G

# 如果被用来更快的索引创建索引所使用临时文件大于制定的值,那就使用键值缓冲方法.
# 这主要用来强制在大表中长字串键去使用慢速的键值缓冲方法来创建索引.
myisam_max_extra_sort_file_size = 10G

# 如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们.
# 这对于拥有多个CPU以及大量内存情况的用户,是一个很好的选择.
# 如果该值大于1,在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内) 
myisam_repair_threads = 1

# 自动检查和修复没有适当关闭的 MyISAM 表.
myisam_recover

# 排序缓冲被用来处理类似ORDER BY以及GROUP BY队列所引起的排序
# 如果排序后的数据无法放入排序缓冲,一个用来替代的基于磁盘的合并分类会被使用
# 查看 “Sort_merge_passes” 状态变量.
# 支持所有引擎,innodb和myisam有自己的innodb_sort_buffer_size和myisam_sort_buffer_size设置
# 默认值256kb；建议值得参考连接数,16G内存,有人推荐8M.
# 注意,该缓冲区是每个连接独占的,所以总缓冲区大小为 1M*连接数；极端情况1M*maxconnectiosns,会超级大.所以要考虑日常平均连接数.
sort_buffer_size = 1M

# 联合查询操作所能使用的缓冲区大小
# 此缓冲被使用来优化全联合(full JOINs 不带索引的联合)
# 类似的联合在极大多数情况下有非常糟糕的性能表现,但是将此值设大能够减轻性能影响.
# 通过 “Select_full_join” 状态变量查看全联合的数量
# 注意,该缓冲区是每个连接独占的,所以总缓冲区大小为 1M*连接数；极端情况1M*maxconnectiosns,会超级大.所以要考虑日常平均连接数.
# 默认值256kb;建议值：16G内存,设置8M.
join_buffer_size = 1M

# MySQL每打开一个表,都会读入一些数据到table_open_cache缓存中,当MySQL在这个缓存中找不到相应信息时,才会去磁盘上读取.
# 即缓存linux文件描述符信息,加快数据文件打开速度
# 它影响myisam表的打开关闭,但是不影响innodb表的打开关闭.
# 假定系统有200个并发连接,则需将此参数设置为 200*N(N为每个连接所需的文件描述符数目)；
# 当把table_open_cache设置为很大时,如果系统处理不了那么多文件描述符,那么就会出现客户端失效,连接不上
# 默认值2000,建议值：根据状态变量Opened_tables去设定
table_open_cache = 2000

# 缓存表定义的相关信息,加快读取表信息速度
# 默认值1400,最大值2000,建议值：基本不改.
table_definition_cache = 1400

# 该参数是myssql 5.6后引入的,目的是提高并发.
# 默认值1,建议值：cpu核数,并且<=16
table_open_cache_instances = 2

# 在cache中保留多少线程用于重用
# 当一个客户端断开连接后,如果cache中的线程还少于thread_cache_size缓存中还有空间,那么客户端的线程将被放到缓存中而不是销毁.
# 这可以在需要大量新连接的时候极大的减少线程创建的开销(一般来说如果有好的线程模型的话,这不会有明显的性能提升.)
# 增加这个值可以改善系统性能.通过show status like  'threads%'比较Connections和Threads_created状态的变量,可以看到这个变量的作用.
# 默认值为8,根据物理内存设置规则如下：
# 	1G  —> 8
# 	2G  —> 16
# 	3G  —> 32
# 	大于3G  —> 64
thread_cache_size = 16

# 此允许应用程序给予线程系统一个提示在同一时间给予渴望被运行的线程的数量.
# 此值只对于支持 thread_concurrency() 函数的系统有意义( 例如Sun Solaris).
# 你可可以尝试使用 [CPU数量]*(2..4) 来作为thread_concurrency的值
thread_concurrency = 8

# 线程使用的堆大小. 此容量的内存在每次连接时被预留.
# MySQL 本身常不会需要超过64K的内存
# 如果需要大量堆的UDF函数
# 或者操作系统对于某些操作需要更多的堆,
# 需要将其设置的更高一点.
# 默认值256k,建议值：16/32G内存,512kb,其他一般不改变,如果报错：Thread stack overrun,就增大看看,
# 注意,每个线程分配内存空间,所以总内存空间...
thread_stack = 512k

# 默认关闭 Federated
skip-federated

##########################################################################################################
# 日志文件相关设置,一般只开启三种日志,错误日志,慢查询日志,二进制日志.普通查询日志不开启.

# 打开全查询日志. 所有的由服务器接收到的查询 (甚至对于一个错误语法的查询)
# 都会被记录下来. 这对于调试非常有用, 在生产环境中常常关闭此项.
#log

# 将警告打印输出到错误log文件. 如果你对于MySQL有任何问题
# 你应该打开警告log并且仔细审查错误日志,查出可能的原因.
#log_warnings

# 普通查询日志,默认值off,不开启
general_log = 0
# 普通查询日志存放地址
general_log_file = /usr/local/mysql-5.7.21/log/mysql-general.log

# 全局动态变量,默认3,范围：1～3
# 表示错误日志记录的信息,1：只记录error信息；2：记录error和warnings信息；3：记录error、warnings和普通的notes信息.
log_error_verbosity = 2
# 错误日志文件地址
log_error = /usr/local/mysql-5.7.21/log/mysql-error.log


# 开启慢查询
slow_query_log = 1

# 所有的使用了比这个时间(以秒为单位)更多的查询会被认为是慢速查询.
# MySQL在5.6.4以及更高版本提供了对秒以下精度时间的存储支持.
# 超过1秒则为慢查询
long_query_time = 1

# 检索行数达到此数值,才记录慢查询日志中
min_examined_row_limit = 100

# mysql 5.6.5新增,用来表示每分钟允许记录到slow log的且未使用索引的SQL语句次数,默认值为0,不限制.
log_throttle_queries_not_using_indexes = 0

# 慢查询日志文件地址
slow_query_log_file = /usr/local/mysql-5.7.21/log/mysql-slow.log

# 在慢速日志中记录更多的信息.
# 一般此项最好打开.
# 打开此项会记录使得那些没有使用索引的查询也被作为到慢速查询附加到慢速日志里
log_long_format

# 记录慢速查询. 慢速查询是指消耗了比 “long_query_time” 定义的更多时间的查询.
# 如果 log_long_format 被打开,那些没有使用索引的查询也会被记录.
# 如果你经常增加新查询到已有的系统内的话. 一般来说这是一个好主意,
log_slow_queries

# 开启记录没有使用索引查询语句
log-queries-not-using-indexes = 1

# 如果你在使用链式从服务器结构的复制模式 (A->B->C),
# 你需要在服务器B上打开此项.
# 此选项打开在从线程上重做过的更新的日志,
# 并将其写入从服务器的二进制日志.
#log_slave_updates


# 开启二进制日志功能.
# 在复制(replication)配置中,作为MASTER主服务器必须打开此项
# 如果你需要从你最后的备份中做基于时间点的恢复,你也同样需要二进制日志.
log_bin = /usr/local/mysql-5.7.21/log/mysql-bin.log

# mysql清除过期日志的时间,默认值0,不自动清理,而是使用滚动循环的方式.
# 超过30天的binlog删除
expire_logs_days = 30

# 如果二进制日志写入的内容超出给定值,日志就会发生滚动.你不能将该变量设置为大于1GB或小于4096字节. 默认值是1GB.
max_binlog_size = 1000M

# binlog的格式也有三种：STATEMENT,ROW,MIXED.mysql 5.7.7后,默认值从 MIXED 改为 ROW
# 关于binlog日志格式问题,请查阅网络资料
binlog_format = row

# 默认值N=1,使binlog在每N次binlog写入后与硬盘同步,ps：1最慢
# sync_binlog = 1 

##########################################################################################################
# innodb选项

# 如果你的MySQL服务包含InnoDB支持但是并不打算使用的话,
# 使用此选项会节省内存以及磁盘空间,并且加速某些部分
#skip-innodb

#默认存储引擎
default-storage-engine = InnoDB 

# 说明：该参数可以提升扩展性和刷脏页性能.
# 默认值1,建议值：4-8；并且必须小于innodb_buffer_pool_instances
innodb_page_cleaners = 4

# 说明：一般8k和16k中选择,8k的话,cpu消耗小些,selcet效率高一点,一般不用改
# 默认值：16k；建议值：不改,
innodb_page_size = 16384

# InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.
# 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.
# 在一个独立使用的数据库服务器上,可以设置这个变量到服务器物理内存大小的80%
# 不要设置过大,否则会导致system的swap空间被占用,由于物理内存的竞争可能导致操作系统的换页颠簸.
# 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制.
# 默认值：128M,建议值：物理内存的60%-80%
innodb_buffer_pool_size = 512M

# 说明:只有当设置 innodb_buffer_pool_size 值大于1G时才有意义,小于1G,instances默认为1,大于1G,instances默认为8
# 但是网络上有评价,最佳性能,每个实例至少1G大小.
# 默认值：1或8,建议值：innodb_buffer_pool_size/innodb_buffer_pool_instances >= 1G
innodb_buffer_pool_instances = 1

# 说明：mysql 5.7 新特性,defines the chunk size for online InnoDB buffer pool resizing operations.
# 实际缓冲区大小必须为innodb_buffer_pool_chunk_size*innodb_buffer_pool_instances*倍数,取略大于innodb_buffer_pool_size
# 默认值128M,建议值：默认值就好,乱改反而容易出问题,它会影响实际buffer pool大小.
innodb_buffer_pool_chunk_size = 128M 

# 在启动时把热数据加载到内存.默认值为on,不修改
innodb_buffer_pool_load_at_startup = 1
# 在关闭时把热数据dump到本地磁盘.默认值为on,不修改
innodb_buffer_pool_dump_at_shutdown = 1

# 说明：影响Innodb缓冲区的刷新算法,建议从小到大配置,
# 直到zero free pages；innodb_lru_scan_depth * innodb_buffer_pool_instances defines the amount of work performed by the page cleaner thread each second.
# 默认值1024,建议值: 未知
innodb_lru_scan_depth = 1024

# InnoDB事务在被回滚之前可以等待一个锁定的超时秒数.
# InnoDB在其拥有的锁定表中自动检测事务死锁并且回滚事务.
# InnoDB用 LOCK TABLES 语句或者在同样事务中使用除了InnoDB以外的其他事务安全的存储引擎那么一个死锁可能发生而InnoDB无法注意到.
# 这种情况下这个timeout值对于解决这种问题就非常有帮助.
# 说明：事务等待获取资源等待的最长时间,单位为秒,看具体业务情况,一般默认值就好
# 默认值：50,建议值：看业务.
innodb_lock_wait_timeout = 60

# 说明：设置了Mysql后台任务（例如页刷新和merge dadta from buffer pool）每秒io操作的上限.
# 默认值：200,建议值：方法一,单盘sata设100,sas10,raid10设200,ssd设2000,fushion-io设50000；方法二,通过测试工具获得磁盘io性能后,设置IOPS数值/2.
innodb_io_capacity = 2000
# 说明：该参数是所有缓冲区线程io操作的总上限.
# 默认值：innodb_io_capacity的两倍.建议值：例如用iometer测试后的iops数值就好
innodb_io_capacity_max = 4000

# InnoDB用来刷新日志的模式.
# 表空间总是使用双重写入刷新方法
# 三种模式：fdatasync(默认),O_DSYNC,O_DIRECT
#   fdatasync：数据文件,buffer pool->os buffer->磁盘；日志文件,buffer pool->os buffer->磁盘；
#   O_DSYNC：  数据文件,buffer pool->os buffer->磁盘；日志文件,buffer pool->磁盘；
#   O_DIRECT： 数据文件,buffer pool->磁盘；           日志文件,buffer pool->os buffer->磁盘；
# 默认值是 “fdatasync”,建议值：使用SAN或者raid,建议用O_DIRECT,不懂测试的话,默认生产上使用O_DIRECT
innodb_flush_method = O_DIRECT

# InnoDB为独立表空间模式,mysql5.7之后默认开启每个数据库的每个表都会生成一个数据空间
# 独立表空间优点：
#   每个表都有自已独立的表空间.
#   每个表的数据和索引都会存在自已的表空间中.
#   可以实现单表在不同的数据库中移动.
#   空间可以回收（除drop table操作处,表空不能自已回收）
# 缺点：单表增加过大,如超过100G
# 结论：共享表空间在Insert操作上少有优势.其它都没独立表空间表现好.当启用独立表空间时,需合理调整：innodb_open_files
# 默认值1,开启
innodb_file_per_table = 1

# 说明：The path where InnoDB creates undo tablespaces.通常等于undo log文件的存放目录.
# 默认值./;自行设置
innodb_undo_directory = /usr/local/mysql-5.7.21/log
# 说明：The number of undo tablespaces used by InnoDB.等于undo log文件数量.5.7.21后开始弃用
# 默认值为0,建议默认值就好,不用调整了.
innodb_undo_tablespaces = 0
# 说明：定义undo使用的回滚段数量.5.7.19后弃用
# 默认值128,建议不动,以后弃用了.
innodb_undo_logs = 128
# 说明：5.7.5后开始使用,在线收缩undo log使用的空间.
# 默认值：关闭,建议值：开启
innodb_undo_log_truncate = 1
# 说明：结合innodb_undo_log_truncate,实现undo空间收缩功能
# 默认值：1G,建议值,不改.
innodb_max_undo_log_size = 1G

# InnoDB的日志文件所在位置. 默认是MySQL的datadir.
# 可以将其指定到一个独立的硬盘上或者一个RAID1卷上来提高其性能
innodb_log_group_home_dir = /usr/local/mysql-5.7.21/log

# 在日志组中每个日志文件的大小
# 更大的设置可以提高性能,但也会增加恢复故障数据库所需的时间
# 默认值:48M,建议值：根据系统的磁盘空间和日志增长情况调整大小
innodb_log_file_size = 128M

# 在日志组中的文件总数.
# 为提高性能,MySQL可以以循环方式将日志文件写到多个文件.
# 默认值2,推荐设置为3建议：根据系统的磁盘空间和日志增长情况调整大小
innodb_log_files_in_group = 3

# 用来缓冲日志数据的缓冲区所用的内存大小.
# 当此值快满时, InnoDB将必须刷新数据到磁盘上.
# 由于基本上每秒都会刷新一次,所以没有必要将此值设置的太大(甚至对于长事务而言)
# M为单位.缓冲区更大能提高性能,但意外的故障将会丢失数据.
innodb_log_buffer_size = 16M

# 说明：可以控制log从系统buffer刷入磁盘文件的刷新频率,增大可减轻系统负荷
# 默认值是1；建议值不改.系统性能一般够用.
innodb_flush_log_at_timeout = 1

# 参数可设为0,1,2；
# 参数0：每秒将log buffer内容刷新到系统buffer中,再调用系统flush操作写入磁盘文件,提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的.
#   	主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中.不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1
# 参数1：每次事物提交,将log buffer内容刷新到系统buffer中,再调用系统flush操作写入磁盘文件.提供了完整的ACID行为.
# 参数2：每次事物提交,将log buffer内容刷新到系统buffer中,隔1秒定时再调用系统flush操作写入磁盘文件.并不能保证100%每秒一定都会刷到磁盘,这要取决于进程的调度.
# 每次事务提交的时候将数据写入事务日志,而这里的写入仅是调用了文件系统的写入操作,而文件系统是有 缓存的,所以这个写入并不能保证数据已经写入到物理磁盘
# 默认值1是为了保证完整的ACID.当然,可以将这个配置项设为1以外的值来换取更高的性能,但是在系统崩溃的时候,将会丢失1秒的数据.
# 设为0的话,mysqld进程崩溃的时候,就会丢失最后1秒的事务.
# 设为2只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据.InnoDB在做恢复的时候会忽略这个值.
# 总结设为1当然是最安全的,但性能页是最差的（相对其他两个参数而言,但不是不能接受）.
# 如果愿意对事务安全折衷如运行一个小的事务或对数据一致性和完整性要求不高完全可以设为2来减少由事务日志引起的磁盘I/O
# 如果只最求性能,例如高并发写的日志服务器,设为0来获得更高性能
innodb_flush_log_at_trx_commit = 1

# 限制Innodb能打开的表的数据,如果库里的表特别多的情况,请增加这个.
# 值默认是300,建议值：参考数据库表总数再进行调整,一般够用不用调整.
innodb_open_files = 8192

# innodb处理I/O(输入输出)读写的后台并发线程数量,根据cpu核来确认
# 这两个参数不支持动态改变,需要把该参数加入到my.cnf里,修改完后重启MySQL服务,允许值的范围从 1-64
# 默认值：4,建议值：根据 CPU 核数来更改与逻辑cpu数量的一半保持一致.
innodb_read_io_threads = 4
innodb_write_io_threads = 4

# 在InnoDb核心内的允许线程数量.
# 最优值依赖于应用程序,硬件以及操作系统的调度方式.
# 过高的值可能导致线程的互斥颠簸.
# 默认设置为 0,表示不限制并发数,这里推荐设置为0,更好去发挥CPU多核处理能力,提高并发量
innodb_thread_concurrency = 0

# InnoDB中的清除操作是一类定期回收无用数据的操作.在之前的几个版本中,清除操作是主线程的一部分,这意味着运行时它可能会堵塞其它的数据库操作.
# 从MySQL5.5.X版本开始,该操作运行于独立的线程中,支持多线程清除操作.用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单独线程
# 设置为 1 时表示使用单独的清除线程.
# 默认值为4,建议不变.
innodb_purge_threads = 4 

# 说明：mysql缓冲区分为new blocks和old blocks；此参数表示old blocks占比；
# 默认值：37,建议值,一般不动
innodb_old_blocks_pct = 37
# 说明：新数据被载入缓冲池,进入old pages链区,当1秒后再次访问,则提升进入new pages链区.
# 默认值：1000
innodb_old_blocks_time=1000
# 说明：开启异步io,可以提高并发性,默认开启.
# 默认值为1,建议不动
innodb_use_native_aio = 1

# 设置此选项如果你希望InnoDB表空间文件被保存在其他分区.
# 默认保存在MySQL的datadir中.
# 默认为空 一般不作变动
#innodb_data_home_dir =
innodb_data_home_dir=/usr/local/mysql-5.7.21/data

# InnoDB 将数据保存在一个或者多个数据文件中成为表空间.
# 如果只有单个逻辑驱动保存数据,一个单个的自增文件就足够好了.
# 其他情况下.每个设备一个文件一般都是个好的选择.
# 也可以配置InnoDB来使用裸盘分区 – 请参考手册来获取更多相关内容
# 默认值 ibdata1:12M:autoextend
innodb_data_file_path = ibdata1:12M:autoextend

# 附加的内存池被InnoDB用来保存 metadata 信息
# 如果InnoDB为此目的需要更多的内存,它会开始从OS这里申请内存.
# 由于这个操作在大多数现代操作系统上已经足够快, 你一般不需要修改此值.
# SHOW INNODB STATUS 命令会显示当先使用的数量.

# 设置了InnoDB存储引擎用来存放数据字典信息以及一些内部数据结构的内存空间大小,除非你的数据对象及其多,否则一般默认不改.
# innodb_additional_mem_pool_size = 16M

# The crash recovery mode.如果发现InnoDB表空间损坏,设置此值为一个非零值可能帮助导出表.
# 只有紧急情况需要恢复数据的时候,才改为大于1-6之间数值.
# 恢复时从1开始并且增加此值直到能够成功的导出表.
# 默认值为0
#innodb_force_recovery = 0

# 在InnoDB缓冲池中最大允许的脏页面的比例.
# 如果达到限额, InnoDB会开始刷新他们防止他们妨碍到干净数据页面.
# 这是一个软限制,不被保证绝对执行.
innodb_max_dirty_pages_pct = 90

# 用来同步IO操作的IO线程的数量. This value is
# 此值在Unix下被硬编码为4,但是在Windows磁盘I/O可能在一个大数值下表现的更好.
innodb_file_io_threads = 4

# 加速InnoDB的关闭. 这会阻止InnoDB在关闭时做全清除以及插入缓冲合并.
# 这可能极大增加关机时间, 但是取而代之的是InnoDB可能在下次启动时做这些操作.
#innodb_fast_shutdown


##########################################################################################################
# 其他....
# 参考http://www.kuqin.com/database/20120815/328905.html
# skip-external-locking

# 禁止MySQL对外部连接进行DNS解析,使用这一选项可以消除MySQL进行DNS解析的时间.
# 缺点：所有远程主机连接授权都要使用IP地址方式,因为只认得ip地址了.
# skip_name_resolve = 0

# 默认值为off,timestamp列会自动更新为当前时间,设置为on|1,timestamp列的值就要显式更新
explicit_defaults_for_timestamp = 1

# 允许外部文件级别的锁. 打开文件锁会对性能造成负面影响
# 所以只有在你在同样的文件上运行多个数据库实例时才使用此选项(注意仍会有其他约束!)
# 或者你在文件层面上使用了其他一些软件依赖来锁定MyISAM表
#external-locking

# 如果你的系统支持 memlock() 函数,你也许希望打开此选项用以让运行中的mysql在在内存高度紧张的时候,数据在内存中保持锁定并且防止可能被swapping out
# 此选项对于性能有益
#memlock

[mysqldump]
# 在导出非常巨大的表时需要此项
# quick选项强制 mysqldump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中
quick

# 服务器发送和接受的最大数据包长度
# 增加该变量的值十分安全,这是因为仅当需要时才会分配额外内存.例如,仅当发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存.
# 该变量之所以取较小默认值是一种预防措施,以捕获客户端和服务器之间的错误信息包,并确保不会因偶然使用大的信息包而导致内存溢出.
max_allowed_packet = 16M

[mysql]
default-character-set = utf8
# mysql命令行工具不使用自动补全功能,建议还是改为
# no-auto-rehash
auto-rehash
socket = /tmp/mysql.sock

# 仅仅允许使用键值的 UPDATEs 和 DELETEs .
#safe-updates

[isamchk]
key_buffer = 512M
sort_buffer_size = 512M
read_buffer = 8M
write_buffer = 8M

[myisamchk]
key_buffer_size = 256M
sort_buffer_size = 256M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout

[mysqld_safe]
# 增加每个进程的可打开文件数量.
# 警告: 确认你已经将全系统限制设定的足够高!
# 打开大量表需要将此值设b
open-files-limit = 8192